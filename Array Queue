//Taewoo Kang
//kangx766
//Array Queue. A fixed length queue implemented as a circular array

class ArrayQueue<Base>{
	private int front; // index of front object in Objects
	private int rear;	//index of rear object in Objects
	private Base [] objects; //The objects in the queue
	
	//Constructor - make a new empty queue that can hold SIZE - 1 elements
	
	public ArrayQueue(int size){
		if(size >= 1){
			front = 0;
			rear = 0;
			objects = (Base []) new Object[size];
		}
		else{
			throw new IllegalArgumentException("Size must be at least one.");
		}
	}
	
	//Is empty. Test if the queue is empty
	
	public boolean isEmpty(){
		return front == rear;
	}
	
	//Is Full. Test if the queue can hold no more elements
	
	public boolean isFull(){
		return front == (rear + 1) % objects.length;
	}
	
	// Enqueue - add object to the rear of queue
	
	public void enqueue(Base object){
		int nextRear = (rear + 1_ % objects.length;
		if(front == nextRear){
			throw new IllegalArgumentException("Queue is full.");
		}
		else{
			rear = nextRear;
			objects[rear] = object;
		}
	}
	
	//Dequeue. Remove an object from the front of the queue and return it.
	
	public Base dequeue(){
		if(isEmpty()){
			throw new IllegalArgumentException("Queue is empty.");
		}
		else{
			front = (front + 1) % objects.length;
			Base temp = objects[front];
			objects[front] = null;
			return temp;
		}
	}
}